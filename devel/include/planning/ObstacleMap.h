// Generated by gencpp from file planning/ObstacleMap.msg
// DO NOT EDIT!


#ifndef PLANNING_MESSAGE_OBSTACLEMAP_H
#define PLANNING_MESSAGE_OBSTACLEMAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <planning/DynamicObstacle.h>

namespace planning
{
template <class ContainerAllocator>
struct ObstacleMap_
{
  typedef ObstacleMap_<ContainerAllocator> Type;

  ObstacleMap_()
    : dynamic_obstacles()  {
    }
  ObstacleMap_(const ContainerAllocator& _alloc)
    : dynamic_obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::planning::DynamicObstacle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::planning::DynamicObstacle_<ContainerAllocator> >::other >  _dynamic_obstacles_type;
  _dynamic_obstacles_type dynamic_obstacles;




  typedef boost::shared_ptr< ::planning::ObstacleMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning::ObstacleMap_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleMap_

typedef ::planning::ObstacleMap_<std::allocator<void> > ObstacleMap;

typedef boost::shared_ptr< ::planning::ObstacleMap > ObstacleMapPtr;
typedef boost::shared_ptr< ::planning::ObstacleMap const> ObstacleMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning::ObstacleMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning::ObstacleMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'planning': ['/home/parallels/workspace/catkin_ws/planning/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning::ObstacleMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::ObstacleMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::ObstacleMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::ObstacleMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::ObstacleMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::ObstacleMap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning::ObstacleMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53002d3079c88d059fd08d0aaa769907";
  }

  static const char* value(const ::planning::ObstacleMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53002d3079c88d05ULL;
  static const uint64_t static_value2 = 0x9fd08d0aaa769907ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning::ObstacleMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning/ObstacleMap";
  }

  static const char* value(const ::planning::ObstacleMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning::ObstacleMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "DynamicObstacle[] dynamic_obstacles\n\
================================================================================\n\
MSG: planning/DynamicObstacle\n\
uint64 timestamp\n\
string id\n\
float64 x\n\
float64 y\n\
float64 theta\n\
float64 velocity\n\
";
  }

  static const char* value(const ::planning::ObstacleMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning::ObstacleMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dynamic_obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning::ObstacleMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning::ObstacleMap_<ContainerAllocator>& v)
  {
    s << indent << "dynamic_obstacles[]" << std::endl;
    for (size_t i = 0; i < v.dynamic_obstacles.size(); ++i)
    {
      s << indent << "  dynamic_obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::planning::DynamicObstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.dynamic_obstacles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MESSAGE_OBSTACLEMAP_H
