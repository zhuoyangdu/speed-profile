// Generated by gencpp from file planning/Pose.msg
// DO NOT EDIT!


#ifndef PLANNING_MESSAGE_POSE_H
#define PLANNING_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planning
{
template <class ContainerAllocator>
struct Pose_
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
    : timestamp(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , length(0.0)
    , velocity(0.0)
    , acceleration(0.0)  {
    }
  Pose_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , length(0.0)
    , velocity(0.0)
    , acceleration(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _length_type;
  _length_type length;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _acceleration_type;
  _acceleration_type acceleration;




  typedef boost::shared_ptr< ::planning::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning::Pose_<ContainerAllocator> const> ConstPtr;

}; // struct Pose_

typedef ::planning::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::planning::Pose > PosePtr;
typedef boost::shared_ptr< ::planning::Pose const> PoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning::Pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning::Pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'planning': ['/home/parallels/workspace/catkin_ws/planning/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::Pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4806b696f34369b900daf76c18728737";
  }

  static const char* value(const ::planning::Pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4806b696f34369b9ULL;
  static const uint64_t static_value2 = 0x00daf76c18728737ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning/Pose";
  }

  static const char* value(const ::planning::Pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timestamp\n\
float64 x\n\
float64 y\n\
float64 theta\n\
float64 length\n\
float64 velocity\n\
float64 acceleration\n\
";
  }

  static const char* value(const ::planning::Pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning::Pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
      stream.next(m.length);
      stream.next(m.velocity);
      stream.next(m.acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning::Pose_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MESSAGE_POSE_H
